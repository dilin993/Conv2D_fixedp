-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2Dfixp is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    in_V_ce0 : OUT STD_LOGIC;
    in_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_V_ce0 : OUT STD_LOGIC;
    out_V_we0 : OUT STD_LOGIC;
    out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_V_ce0 : OUT STD_LOGIC;
    kernel_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of conv2Dfixp is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2Dfixp,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=3080705,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=188,HLS_SYN_LUT=294}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_cast_fu_141_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_cast_reg_424 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_151_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_432 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_161_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_437 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond1_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_173_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_cast_reg_442 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_1_fu_183_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_450 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_V_addr_reg_455 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond2_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_1_fu_205_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_1_reg_463 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp1_fu_211_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_reg_468 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond3_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_255_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_6_reg_473 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_2_fu_279_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_reg_478 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp3_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_reg_483 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_fu_297_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_1_reg_491 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp2_fu_303_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_reg_496 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_501 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_8_fu_366_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_reg_505 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_fu_375_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_reg_510 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal in_V_load_reg_525 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal kernel_V_load_reg_530 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_535 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_95 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_106 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_reg_117 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_reg_129 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_5_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast8_fu_169_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_189_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_cast_fu_217_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ii_fu_220_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_225_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_239_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_fu_267_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_275_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_cast6_fu_263_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_cast_fu_309_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal jj_fu_312_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_321_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_335_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp7_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev4_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal jj_cast_fu_317_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_cast_fu_362_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_17_cast_fu_371_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_cast_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_415_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_415_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component conv2Dfixp_mac_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    conv2Dfixp_mac_mubkb_U1 : component conv2Dfixp_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 20,
        dout_WIDTH => 20)
    port map (
        din0 => kernel_V_load_reg_530,
        din1 => in_V_load_reg_525,
        din2 => grp_fu_415_p2,
        dout => grp_fu_415_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_177_p2 = ap_const_lv1_1))) then 
                i_reg_95 <= i_1_reg_432;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_95 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_199_p2 = ap_const_lv1_1))) then 
                j_reg_106 <= j_1_reg_450;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_145_p2 = ap_const_lv1_0))) then 
                j_reg_106 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    m_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_291_p2 = ap_const_lv1_1))) then 
                m_reg_117 <= m_1_reg_463;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_177_p2))) then 
                m_reg_117 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                n_reg_129 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                n_reg_129 <= n_1_reg_491;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_432 <= i_1_fu_151_p2;
                    i_cast_reg_424(8 downto 0) <= i_cast_fu_141_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                in_V_load_reg_525 <= in_V_q0;
                kernel_V_load_reg_530 <= kernel_V_q0;
                p_Val2_s_reg_535 <= out_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_450 <= j_1_fu_183_p2;
                    j_cast_reg_442(8 downto 0) <= j_cast_fu_173_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                m_1_reg_463 <= m_1_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_1_reg_491 <= n_1_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                or_cond2_reg_501 <= or_cond2_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_177_p2))) then
                out_V_addr_reg_455 <= tmp_5_fu_194_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_199_p2))) then
                tmp1_reg_468 <= tmp1_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_fu_291_p2))) then
                tmp2_reg_496 <= tmp2_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp3_reg_483 <= tmp3_fu_285_p2;
                tmp_2_reg_478 <= tmp_2_fu_279_p2;
                    tmp_6_reg_473(17 downto 8) <= tmp_6_fu_255_p3(17 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (or_cond2_fu_357_p2 = ap_const_lv1_1))) then
                tmp_10_reg_510 <= tmp_10_fu_375_p2;
                tmp_8_reg_505 <= tmp_8_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_145_p2 = ap_const_lv1_0))) then
                    tmp_1_reg_437(15 downto 8) <= tmp_1_fu_161_p3(15 downto 8);
            end if;
        end if;
    end process;
    i_cast_reg_424(9) <= '0';
    tmp_1_reg_437(7 downto 0) <= "00000000";
    j_cast_reg_442(9) <= '0';
    tmp_6_reg_473(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_145_p2, ap_CS_fsm_state3, exitcond2_fu_177_p2, ap_CS_fsm_state4, exitcond3_fu_199_p2, ap_CS_fsm_state6, exitcond_fu_291_p2, or_cond2_fu_357_p2, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_145_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_177_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_199_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_291_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = or_cond2_fu_357_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_145_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_145_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_145_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_145_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_145_p2 <= "1" when (i_reg_95 = ap_const_lv9_100) else "0";
    exitcond2_fu_177_p2 <= "1" when (j_reg_106 = ap_const_lv9_100) else "0";
    exitcond3_fu_199_p2 <= "1" when (m_reg_117 = ap_const_lv2_3) else "0";
    exitcond_fu_291_p2 <= "1" when (n_reg_129 = ap_const_lv2_3) else "0";
    grp_fu_415_p2 <= (p_Val2_s_reg_535 & ap_const_lv4_0);
    i_1_fu_151_p2 <= std_logic_vector(unsigned(i_reg_95) + unsigned(ap_const_lv9_1));
    i_cast_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_95),10));
    icmp7_fu_345_p2 <= "0" when (tmp_15_fu_335_p4 = ap_const_lv2_1) else "1";
    icmp_fu_249_p2 <= "0" when (tmp_7_fu_239_p4 = ap_const_lv2_1) else "1";
    ii_fu_220_p2 <= std_logic_vector(unsigned(i_cast_reg_424) + unsigned(tmp1_cast_fu_217_p1));
    in_V_address0 <= tmp_s_fu_380_p1(16 - 1 downto 0);

    in_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            in_V_ce0 <= ap_const_logic_1;
        else 
            in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_183_p2 <= std_logic_vector(unsigned(j_reg_106) + unsigned(ap_const_lv9_1));
    j_cast8_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_106),16));
    j_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_106),10));
        jj_cast_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(jj_fu_312_p2),16));

    jj_fu_312_p2 <= std_logic_vector(signed(tmp2_cast_fu_309_p1) + signed(j_cast_reg_442));
    kernel_V_address0 <= tmp_11_fu_387_p1(4 - 1 downto 0);

    kernel_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kernel_V_ce0 <= ap_const_logic_1;
        else 
            kernel_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_205_p2 <= std_logic_vector(unsigned(m_reg_117) + unsigned(ap_const_lv2_1));
    n_1_fu_297_p2 <= std_logic_vector(unsigned(n_reg_129) + unsigned(ap_const_lv2_1));
    or_cond2_fu_357_p2 <= (tmp4_fu_351_p2 and tmp3_reg_483);
    out_V_address0 <= out_V_addr_reg_455;

    out_V_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            out_V_ce0 <= ap_const_logic_1;
        else 
            out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_V_d0 <= grp_fu_415_p3(19 downto 4);

    out_V_we0_assign_proc : process(or_cond2_reg_501, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (or_cond2_reg_501 = ap_const_lv1_1))) then 
            out_V_we0 <= ap_const_logic_1;
        else 
            out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_267_p3),5));
    p_shl_fu_267_p3 <= (m_reg_117 & ap_const_lv2_0);
    rev4_fu_329_p2 <= (tmp_9_fu_321_p3 xor ap_const_lv1_1);
    rev_fu_233_p2 <= (tmp_3_fu_225_p3 xor ap_const_lv1_1);
        tmp1_cast_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_468),10));

    tmp1_fu_211_p2 <= std_logic_vector(unsigned(m_reg_117) + unsigned(ap_const_lv2_3));
        tmp2_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_reg_496),10));

    tmp2_fu_303_p2 <= std_logic_vector(unsigned(n_reg_129) + unsigned(ap_const_lv2_3));
    tmp3_fu_285_p2 <= (icmp_fu_249_p2 and rev_fu_233_p2);
    tmp4_fu_351_p2 <= (icmp7_fu_345_p2 and rev4_fu_329_p2);
    tmp_10_fu_375_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_371_p1) + unsigned(tmp_2_reg_478));
    tmp_11_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_cast_fu_384_p1),64));
    tmp_14_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_cast_fu_317_p1),18));
    tmp_15_fu_335_p4 <= jj_fu_312_p2(9 downto 8);
    tmp_17_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_129),5));
        tmp_18_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_reg_510),32));

    tmp_1_fu_161_p3 <= (tmp_fu_157_p1 & ap_const_lv8_0);
    tmp_2_fu_279_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_275_p1) - unsigned(tmp_8_cast6_fu_263_p1));
    tmp_3_fu_225_p3 <= ii_fu_220_p2(9 downto 9);
    tmp_4_fu_189_p2 <= std_logic_vector(unsigned(tmp_1_reg_437) + unsigned(j_cast8_fu_169_p1));
    tmp_5_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_189_p2),64));
    tmp_6_fu_255_p3 <= (ii_fu_220_p2 & ap_const_lv8_0);
    tmp_7_fu_239_p4 <= ii_fu_220_p2(9 downto 8);
    tmp_8_cast6_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_117),5));
    tmp_8_fu_366_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_362_p1) + unsigned(tmp_6_reg_473));
    tmp_9_fu_321_p3 <= jj_fu_312_p2(9 downto 9);
    tmp_fu_157_p1 <= i_reg_95(8 - 1 downto 0);
    tmp_s_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_505),64));
end behav;
